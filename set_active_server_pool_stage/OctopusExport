{
  "Id": "ActionTemplates-601",
  "Name": "F5 LTM - Set active server pool with staging",
  "Description": "Set a F5 LTM virtual server's server pool property to make a server pool live.  Set up a F5 datagroup that specifies the live and staging blue/green server pool.\n\nhttps://github.com/rongriffin/Octopus-F5-LTM-steps",
  "ActionType": "Octopus.Script",
  "Version": 0,
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.RunOnServer": "false",
    "Octopus.Action.Script.ScriptBody": "##\r\n# Print the settings for debugging purposes\r\n##\r\nfunction Print-DebugVariables($LtmIp, $UserName, $VirtualServer, $ServerPool, $StageServerPool) {\r\n    Write-Host \"Using LTM IP: $LtmIP\"\r\n    Write-Host \"Using Username: $UserName\"\r\n    Write-Host \"Using Virtual Server: $VirtualServer\"\r\n    Write-Host \"Using New Server Pool: $ServerPool\"\r\n    Write-Host \"Using New Stage Server Pool: $StageServerPool\"\r\n}\r\n\r\n##\r\n# Get the current virtual server pool name\r\n##\r\nfunction Get-CurrentPool($LtmIp, $VirtualServer, $Credential) {\r\n    $uri = \"https://$LtmIp/mgmt/tm/ltm/virtual/$VirtualServer\"\r\n    Write-Host \"Requesting current server pool from $uri\"\r\n    $response = Invoke-RestMethod -Uri $uri -Credential $Credential -Method Get \r\n\r\n    return $response.pool\r\n}\r\n\r\n##\r\n# Some LTM devices can be paired for failover.  Query a known device to\r\n# select the active device in the group.\r\n##\r\nfunction Get-ActiveLtmDevice($LtmIp, $Credential) {\r\n    $uri = \"https://$LtmIp/mgmt/tm/cm/device\"\r\n\r\n    Write-Host \"Requesting device config from $uri\"\r\n    $response = Invoke-RestMethod -Uri $uri -Credential $Credential -Method Get \r\n\r\n    $active = $null\r\n    foreach ($item in $response.Items) {\r\n        if ($item.failoverState -eq \"active\") {\r\n            $active = $item.name\r\n            Write-Host \"$active is an active node\"\r\n        }\r\n        else {\r\n            Write-Host $item.fullPath \" is not active\" \r\n        }\r\n    }\r\n    if ($active -eq $null) {\r\n        Write-Error \"No active device found.\"\r\n    }\r\n\r\n    return $active\r\n}\r\n\r\n##\r\n# Set a virtual server's pool name\r\n##\r\nfunction Set-ServerPool($LtmIp, $VirtualServer, $Pool, $Credential) {\r\n    $uri = \"https://$LtmIp/mgmt/tm/ltm/virtual/$VirtualServer\"\r\n    Write-Host \"Setting server pool $Pool at $uri\"\r\n\r\n    $request = @{\r\n        pool=\"$Pool\"\r\n    }\r\n\r\n    $body = $request | ConvertTo-Json\r\n    Invoke-RestMethod -Uri $uri -Credential $Credential -Method Patch -Body $body -ContentType 'application/json'\r\n}\r\n\r\n##\r\n# Generate the name of a data group on the f5 based on the virtual server name.\r\n# The name of datagroups created by this script is in the form 'dg_<virtual server name'.\r\n##\r\nfunction Format-DataGroupName($VirtualServer) {\r\n    $dataGroupName = $VirtualServer -replace '/Common/',''\r\n    return \"dg_$dataGroupName\"\r\n}\r\n\r\n##\r\n# Retrieve a datagroup from the f5 device.\r\n##\r\nfunction Get-DataGroup($LtmIp, $DataGroupName, $Credential) {    \r\n    $uri = \"https://$LtmIp/mgmt/tm/ltm/data-group/internal/$DataGroupName\"\r\n    Write-Host \"Getting data group $dataGroupName at $uri\"\r\n  \r\n    try {\r\n        $response = Invoke-RestMethod -Uri $uri -Credential $Credential -Method Get\r\n    }\r\n    catch {\r\n        if ($_.Exception.Response.StatusCode.Value__ -eq 404) {\r\n            $response = $null\r\n        }\r\n        else {\r\n            throw $_.Exception\r\n        }\r\n    }\r\n    \r\n    return $response\r\n}\r\n\r\n##\r\n# Create a new data group on the f5 with the blue_green_pool information setup.\r\n##\r\nfunction Create-DataGroupPool($LtmIp, $DataGroupName, $ServerPool, $StageServerPool, $Credential) {\r\n     $uri = \"https://$LtmIp/mgmt/tm/ltm/data-group/internal/\"\r\n     Write-Host \"Creating data group $dataGroupName at $uri\"\r\n\r\n     $request = @{\r\n       name = $DataGroupName\r\n       type = \"string\"\r\n       records = Generate-DataGroupPoolRecord -ServerPool $ServerPool -StageServerPool $StageServerPool\r\n    }\r\n\r\n    $body = $request | ConvertTo-Json\r\n    Invoke-RestMethod -Uri $uri -Credential $Credential -Method Post -Body $body -ContentType 'application/json'\r\n}\r\n\r\n##\r\n# Update the blue_green_pool record of the specified datagroup\r\n##\r\nfunction Update-DataGroupPool($LtmIp, $DataGroupName, $ServerPool, $StageServerPool, $DataGroup, $Credential) {\r\n     $uri = \"https://$LtmIp/mgmt/tm/ltm/data-group/internal/$DataGroupName\"\r\n     Write-Host \"Updating data group $dataGroupName at $uri\"\r\n\r\n     # Generate new record data\r\n     $newRecords = Generate-DataGroupPoolRecord -ServerPool $ServerPool -StageServerPool $StageServerPool\r\n\r\n     $records = $DataGroup.records\r\n     if ($records -eq $null) {\r\n         $records = $newRecords\r\n     }\r\n     else {\r\n        $keys = @(\"blue_green_pool\", \"blue_green_pool_stage\")\r\n\r\n        foreach ($key in $keys) {\r\n            # Try updating 'blue_green_pool' \r\n            $poolRecord = $records | Where-Object -Property name -eq $key\r\n            $newRecord = $newRecords | Where-Object -Property name -eq $key\r\n            if ($poolRecord -eq $null) {\r\n                $records = $records += $newRecord\r\n            }\r\n            else {\r\n                $poolRecord.data = $newRecord.data\r\n            }\r\n        }\r\n     }\r\n\r\n    $request = @{\r\n       records = $records\r\n    }\r\n\r\n    $body = $request | ConvertTo-Json\r\n    Invoke-RestMethod -Uri $uri -Credential $Credential -Method Patch -Body $body -ContentType 'application/json'\r\n}\r\n\r\n##\r\n# Create the structure for a data group's blue_green_pool and stage records\r\n##\r\nfunction Generate-DataGroupPoolRecord($ServerPool, $StageServerPool) {\r\n    return @(@{\r\n                name = \"blue_green_pool\"\r\n                data = $ServerPool\r\n            }, \r\n            @{\r\n                name = \"blue_green_pool_stage\"\r\n                data = $StageServerPool\r\n            }\r\n        )\r\n}\r\n\r\n##\r\n# Configure a data group with the blue_green_pool setting that is specified\r\n##\r\nfunction Config-DataGroupPool($LtmIp, $VirtualServer, $ServerPool, $StageServerPool, $Credential)\r\n{\r\n    $dataGroupName = $dataGroupName = Format-DataGroupName -VirtualServer $VirtualServer\r\n    $dg = Get-DataGroup -LtmIp $LtmIp -DataGroupName $dataGroupName -Credential $Credential\r\n\r\n    if ($dg -eq $null) {\r\n        Write-Host \"$dataGroupName was not found.  Creating...\"\r\n        Create-DataGroupPool -LtmIp $LtmIp -DataGroupName $dataGroupName -ServerPool $ServerPool -StageServerPool $StageServerPool -Credential $Credential\r\n    }\r\n    else {\r\n        write-host \"$dataGroupName found.  Updating...\"\r\n        Update-DataGroupPool -LtmIp $LtmIp -DataGroupName $dataGroupName -ServerPool $ServerPool -StageServerPool $StageServerPool -DataGroup $dg -Credential $Credential\r\n    }\r\n}\r\n\r\n# Handle untrusted certs since we use self-signed certificates.\r\nadd-type @\"\r\n    using System.Net;\r\n    using System.Security.Cryptography.X509Certificates;\r\n    public class TrustAllCertsPolicy : ICertificatePolicy {\r\n        public bool CheckValidationResult(\r\n            ServicePoint srvPoint, X509Certificate certificate,\r\n            WebRequest request, int certificateProblem) {\r\n            return true;\r\n        }\r\n    }\r\n\"@\r\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\r\n\r\nPrint-DebugVariables $stepF5LtmBigIP $stepF5LtmUserName $stepF5LtmVirtualServer $stepF5LtmNewServerPool $stepF5LtmNewStageServerPool\r\n\r\n#create F5 Credentials\r\n$secpasswd = ConvertTo-SecureString $stepF5LtmUserPassword -AsPlainText -Force\r\n$cred = New-Object System.Management.Automation.PSCredential ($stepF5LtmUserName, $secpasswd)\r\n\r\n#select the active device\r\n$activeLtmBigIp = Get-ActiveLtmDevice -LtmIp $stepF5LtmBigIP -Credential $cred\r\n\r\n# Check the current server pool\r\n$currentPool = Get-CurrentPool -LtmIp $activeLtmBigIp -VirtualServer $stepF5LtmVirtualServer -Credential $cred\r\nWrite-Host \"The current pool is $currentPool\"\r\n\r\nIf($currentPool -Match $stepF5LtmNewServerPool) {\r\n    Write-Host \"Specified server pool is already active.  Skipping...\"\r\n}\r\nElse {\r\n    Set-ServerPool -LtmIp $activeLtmBigIp -VirtualServer $stepF5LtmVirtualServer -Pool $stepF5LtmNewServerPool -Credential $cred\r\n    Config-DataGroupPool -LtmIp $activeLtmBigIp -VirtualServer $stepF5LtmVirtualServer -ServerPool $stepF5LtmNewServerPool -StageServerPool $stepF5LtmNewStageServerPool -Credential $cred\r\n}",
    "Octopus.Action.Script.ScriptFileName": null,
    "Octopus.Action.Package.FeedId": null,
    "Octopus.Action.Package.PackageId": null
  },
  "Parameters": [
    {
      "Id": "cc9d4e89-7503-4e99-b20d-c35248d3e23b",
      "Name": "stepF5LtmBigIp",
      "Label": "F5 LTM Big IP",
      "HelpText": "The ip address or dns name of the F5 BIG-IP device.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "de485ded-5050-4f02-9811-efb960fdf0bf",
      "Name": "stepF5LtmUserName",
      "Label": "F5 LTM User Name",
      "HelpText": "The username of a F5 LTM user who has access to the API",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "830d9fa1-9894-484d-a7d5-fbe08534e694",
      "Name": "stepF5LtmUserPassword",
      "Label": "F5 LTM User Password",
      "HelpText": "The password for the F5 LTM user who has access to the API",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "b67a0a2e-68d9-4e8f-9326-75545ca3a5ca",
      "Name": "stepF5LtmVirtualServer",
      "Label": "F5 LTM Virtual Server Name",
      "HelpText": "The name of the F5 LTM virtual server whose server pool property we're setting.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "84437063-4c40-48e7-bafe-9a67c22da9db",
      "Name": "stepF5LtmNewServerPool",
      "Label": "F5 LTM New Server Pool Name",
      "HelpText": "The name of the server pool we want the specified virtual server to start using",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "ec3eaed5-7197-4303-8e6e-1b2463549417",
      "Name": "stepF5LtmNewStageServerPool",
      "Label": "F5 LTM New Stage Server Pool",
      "HelpText": "The name of the staging server pool we want to setup in a F5 data group.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "$Meta": {
    "ExportedAt": "2017-05-01T20:28:14.939Z",
    "OctopusVersion": "3.4.14",
    "Type": "ActionTemplate"
  }
}